

#   ██████╗ ████████╗████████╗███████╗██████╗                         
#  ██╔═══██╗╚══██╔══╝╚══██╔══╝██╔════╝██╔══██╗                        
#  ██║   ██║   ██║      ██║   █████╗  ██████╔╝█████╗                  
#  ██║   ██║   ██║      ██║   ██╔══╝  ██╔══██╗╚════╝                  
#  ╚██████╔╝   ██║      ██║   ███████╗██║  ██║                        
#   ╚═════╝    ╚═╝      ╚═╝   ╚══════╝╚═╝  ╚═╝                        
#  ██╗      █████╗ ██╗   ██╗███╗   ██╗ ██████╗██╗  ██╗███████╗██████╗ 
#  ██║     ██╔══██╗██║   ██║████╗  ██║██╔════╝██║  ██║██╔════╝██╔══██╗
#  ██║     ███████║██║   ██║██╔██╗ ██║██║     ███████║█████╗  ██████╔╝
#  ██║     ██╔══██║██║   ██║██║╚██╗██║██║     ██╔══██║██╔══╝  ██╔══██╗
#  ███████╗██║  ██║╚██████╔╝██║ ╚████║╚██████╗██║  ██║███████╗██║  ██║
#  ╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝

# Terminal shell script launcher, written in rust
# Source Code: https://github.com/kuokuo123/otter-launcher

# Recommended to be used in companion with sway-launcher-desktop to launch desktop applications
# https://github.com/Biont/sway-launcher-desktop


[general]
default_module = "gg" # module to run when no prefix is matched
empty_module = "app" # run with an empty prompt
exec_cmd = "sh -c" # exec command of your shell
# for example: "bach -c" for bash; "zsh -c" for zsh; also accept wm commands like "hyprctl dispatch exec"
vi_mode = false # set true to use vi keybinds, false emacs keybinds
esc_to_abort = true # useful for vi users
cheatsheet_entry = "?" # when prompted, will show a list of configured modules
cheatsheet_viewer = "less -R; clear" # command to show cheatsheet; through piping stdout
clear_screen_after_execution = false
loop_mode = false # don't quit after executing a module, useful with scratchpads
external_editor = "nvim" # if set, press ctrl+e (or v in vi normal mode) to edit prompt in specified program
#callback = "" # if set, will run after module execution; for example, calling swaymsg to adjust window size


# ANSI color codes are allowed. However, \x1b should be replaced with \u001B, because the rust toml crate cannot read \x as an escaped character
[interface]
# use three quotes to write longer commands
header = """
 \u001B[34;1m  \u001B[35;1m❯\u001B[0m $USER\u001B[31;1m@\u001B[0m$(echo $HOSTNAME)             \u001B[31m\u001B[0m $(cat /proc/loadavg | cut -d ' ' -f 1)  \u001B[33m󰍛\u001B[0m $(free -h | awk 'FNR == 2 {print $3}' | sed 's/i//')
    \u001B[35;1m❯ \u001B[0;1m """
header_cmd = "" # run a command and print stdout above the header
header_cmd_trimmed_lines = 0 # remove trailing lines from header_cmd output, in case of some programs appending excessive empty lines
header_concatenate = false # print header and header_cmd output to the same line, default to false
list_prefix = "      "
selection_prefix = "    \u001B[31;1m> "
place_holder = "\u001B[37mtype and search"
default_module_message = "      \u001B[33msearch\u001B[0m the internet" # shown when the default module is in use
empty_module_message = "" # shown when the empty module is in use
suggestion_mode = "list" # available options: list, hint
suggestion_lines = 6 # 0 to disable suggestions and tab completion
indicator_with_arg_module = "\u001B[31m^\u001B[0m " # the sign showing whether a module should run with an argument
indicator_no_arg_module = "\u001B[31m$\u001B[0m "
prefix_padding = 3 # format prefixes to have a uniformed width
# below color options affect all modules; per-module coloring can be configured using ansi codes individually
prefix_color = "\u001B[33m"
description_color = "\u001B[38m"
place_holder_color = "\u001B[30m"
hint_color = "\u001B[30m" # the color of hint mode suggestions
# move the interface rightward or upward, useful with chafa image
move_right = 0
move_up = 0


# modules are defined as followed
# otter-launcher runs cmd as a child process. Use "setsid -f" to unbind or fork the launched command, like normal shell scripting. While unbinding is useful for running gui programs, otter-launcher should retain the ability to run text-based programs.
[[modules]]
description = "open the IDE"
prefix = "zed"
cmd = "setsid gtk-launch 'dev.zed.Zed' >/dev/null 2>&1 < /dev/null && disown; exit"
with_argument = false

[[modules]]
description = "launch the browser"
prefix = "zen"
cmd = "setsid gtk-launch 'zen' >/dev/null 2>&1 < /dev/null && disown; exit"
with_argument = false

[[modules]]
description = "search on the web"
prefix = "gg"
cmd = """
if [ -z "$(hyprctl clients | grep "class: zen")" ]; then
    hyprctl dispatch exec "zen-browser"
    sleep 1.5
    xdg-open https://www.startpage.com/do/dsearch?query='{}'
else
    echo "zen-browser is already running"
    if [ -z "$(hyprctl activewindow | grep "class: zen")" ]; then
        hyprctl dispatch focuswindow "class:zen"
    else
        hyprctl dispatch killactive none
    fi
    xdg-open https://www.startpage.com/do/dsearch?query='{}'
fi
"""

with_argument = true # If "with_argument" is true, the {} in the cmd value will be replaced with user input. If the field is not explicitly set, will be taken as false.
url_encode = true # "url_encode" should be true if the module is set to call webpages, as this ensures special characters in url being readable to browsers. It'd better be false with shell scripts. If the field is not explicitly set, will be taken as false.

# fzf is needed to run below functions
[[modules]]
description = "launch desktop programs"
prefix = "app"
cmd = """
desktop_file() {
find /usr/share/applications -name "*.desktop" 2>/dev/null
find /usr/local/share/applications -name "*.desktop" 2>/dev/null
find "$HOME/.local/share/applications" -name "*.desktop" 2>/dev/null
find /var/lib/flatpak/exports/share/applications -name "*.desktop" 2>/dev/null
find "$HOME/.local/share/flatpak/exports/share/applications" -name "*.desktop" 2>/dev/null
}
selected="$(desktop_file | sed 's/.desktop$//g' | sort | fzf -m -d / --with-nth -1 --reverse --padding 1,3 --prompt 'Launch Apps: ')"
[ -z "$selected" ] && exit
echo "$selected" | while read -r line ; do setsid -f gtk-launch "$(basename $line)"; done
"""

[[modules]]
description = "power menu with fzf"
prefix = "po"
cmd = """
function power {
if [[ -n $1 ]]; then
case $1 in
"logout") session=`loginctl session-status | head -n 1 | awk '{print $1}'`; loginctl terminate-session $session ;;
"suspend") systemctl suspend ;;
"hibernate") systemctl hibernate ;;
"reboot") systemctl reboot ;;
"shutdown") systemctl poweroff ;;
esac fi }
power $(echo -e 'reboot\nshutdown\nlogout\nsuspend\nhibernate' | fzf --reverse --no-scrollbar --padding 1,3 --prompt 'Power Menu: ' | tail -1)
"""

[[modules]]
description = "search archwiki"
prefix = "aw"
cmd = """
if [ -z "$(hyprctl clients | grep "class: zen")" ]; then
    hyprctl dispatch exec "zen-browser"
    sleep 1.5
    xdg-open https://wiki.archlinux.org/index.php?search='{}'
else
    echo "zen-browser is already running"
    if [ -z "$(hyprctl activewindow | grep "class: zen")" ]; then
        hyprctl dispatch focuswindow "class:zen"
    else
        hyprctl dispatch killactive none
    fi
    xdg-open https://wiki.archlinux.org/index.php?search='{}'
fi
"""
with_argument = true
url_encode = true
unbind_proc = true

[[modules]]
description = "search for arch packages"
prefix = "pac"
cmd = """
if [ -z "$(hyprctl clients | grep "class: zen")" ]; then
    hyprctl dispatch exec "zen-browser"
    sleep 1.5
    xdg-open https://archlinux.org/packages/?q='{}'
else
    echo "zen-browser is already running"
    if [ -z "$(hyprctl activewindow | grep "class: zen")" ]; then
        hyprctl dispatch focuswindow "class:zen"
    else
        hyprctl dispatch killactive none
    fi
    xdg-open https://archlinux.org/packages/?q='{}'
fi
"""
with_argument = true
url_encode = true
unbind_proc = true

[[modules]]
description = "search for aur packages"
prefix = "aur"
cmd = """
if [ -z "$(hyprctl clients | grep "class: zen")" ]; then
    hyprctl dispatch exec "zen-browser"
    sleep 1.5
    xdg-open https://aur.archlinux.org/packages?K='{}'
else
    echo "zen-browser is already running"
    if [ -z "$(hyprctl activewindow | grep "class: zen")" ]; then
        hyprctl dispatch focuswindow "class:zen"
    else
        hyprctl dispatch killactive none
    fi
    xdg-open https://aur.archlinux.org/packages?K='{}'
fi
"""
with_argument = true
url_encode = true
unbind_proc = true

[[modules]]
description = "cambridge dictionary"
prefix = "dc"
cmd = "xdg-open 'https://dictionary.cambridge.org/dictionary/english/{}'"
with_argument = true
url_encode = true
unbind_proc = true

[[modules]]
description = "launch a shell session"
prefix = "zsh"
cmd = "clear && exec zsh"
with_argument = false
url_encode = true

[[modules]]
description = "search github"
prefix = "gh"
cmd = """
if [ -z "$(hyprctl clients | grep "class: zen")" ]; then
    hyprctl dispatch exec "zen-browser"
    sleep 1.5
    xdg-open https://github.com/search?q='{}'
else
    echo "zen-browser is already running"
    if [ -z "$(hyprctl activewindow | grep "class: zen")" ]; then
        hyprctl dispatch focuswindow "class:zen"
    else
        hyprctl dispatch killactive none
    fi
    xdg-open https://github.com/search?q='{}'
fi
"""
with_argument = true
url_encode = true

[[modules]]
description = "open on youtube"
prefix = "yt"
cmd = """
if [ -z "$(hyprctl clients | grep "class: zen")" ]; then
    hyprctl dispatch exec "zen-browser"
    sleep 1.5
    xdg-open 'https://www.youtube.com/results?search_query={}'
else
    echo "zen-browser is already running"
    if [ -z "$(hyprctl activewindow | grep "class: zen")" ]; then
        hyprctl dispatch focuswindow "class:zen"
    else
        hyprctl dispatch killactive none
    fi
    xdg-open 'https://www.youtube.com/results?search_query={}'
fi
"""
with_argument = true
url_encode = true

[[modules]]
description = "launch program in a new terminal"
prefix = "sh"
cmd = "setsid -f kitty -e {}"
with_argument = true

[[modules]]
description = "secret vault"
prefix = "kee"
cmd = "nohup keepassxc"
with_argument = false
unbind_proc = true

[[modules]]
description = "shutdown the machine"
prefix = "shutdown"
cmd = "shutdown now"
with_argument = false

[[modules]]
description = "reboot the machine"
prefix = "reboot"
cmd = "reboot"
with_argument = false

[[modules]]
description = "close this window"
prefix = "exit"
cmd = "exit"
with_argument = true
url_encode = true
